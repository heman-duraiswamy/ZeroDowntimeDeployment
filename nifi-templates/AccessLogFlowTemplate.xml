<?xml version="1.0" encoding="UTF-8" standalone="yes"?><template><description></description><name>AccessLogFlowTemplate</name><snippet><connections><id>55b1af5d-445d-412c-8ebb-84e1e106a18e</id><parentGroupId>b4071270-9195-4a69-92b5-b30e563380d1</parentGroupId><backPressureDataSizeThreshold>0 MB</backPressureDataSizeThreshold><backPressureObjectThreshold>0</backPressureObjectThreshold><destination><groupId>b4071270-9195-4a69-92b5-b30e563380d1</groupId><id>b87b5f65-7f16-4b00-b8b2-fa0747f468de</id><type>FUNNEL</type></destination><flowFileExpiration>0 sec</flowFileExpiration><labelIndex>1</labelIndex><name></name><selectedRelationships>success</selectedRelationships><source><groupId>b4071270-9195-4a69-92b5-b30e563380d1</groupId><id>005edcac-46ee-49cb-9de0-f0376a3e2b4f</id><type>PROCESSOR</type></source><zIndex>0</zIndex></connections><connections><id>58e83537-c99e-41db-89af-c1b23d73814b</id><parentGroupId>b4071270-9195-4a69-92b5-b30e563380d1</parentGroupId><backPressureDataSizeThreshold>0 MB</backPressureDataSizeThreshold><backPressureObjectThreshold>0</backPressureObjectThreshold><destination><groupId>b4071270-9195-4a69-92b5-b30e563380d1</groupId><id>b87b5f65-7f16-4b00-b8b2-fa0747f468de</id><type>FUNNEL</type></destination><flowFileExpiration>0 sec</flowFileExpiration><labelIndex>1</labelIndex><name></name><selectedRelationships>success</selectedRelationships><source><groupId>b4071270-9195-4a69-92b5-b30e563380d1</groupId><id>9ea816c4-1183-41a0-b336-0126788d59a9</id><type>PROCESSOR</type></source><zIndex>0</zIndex></connections><connections><id>8a299db7-fa74-4118-81dc-edc6e5be0a9e</id><parentGroupId>b4071270-9195-4a69-92b5-b30e563380d1</parentGroupId><backPressureDataSizeThreshold>0 MB</backPressureDataSizeThreshold><backPressureObjectThreshold>0</backPressureObjectThreshold><destination><groupId>b4071270-9195-4a69-92b5-b30e563380d1</groupId><id>c80e5614-a310-47a3-884c-d890cd4886b8</id><type>OUTPUT_PORT</type></destination><flowFileExpiration>0 sec</flowFileExpiration><labelIndex>1</labelIndex><name></name><source><groupId>b4071270-9195-4a69-92b5-b30e563380d1</groupId><id>b87b5f65-7f16-4b00-b8b2-fa0747f468de</id><type>FUNNEL</type></source><zIndex>0</zIndex></connections><connections><id>bef854fc-fd0e-4db8-ae0a-5dcb50d3a930</id><parentGroupId>b4071270-9195-4a69-92b5-b30e563380d1</parentGroupId><backPressureDataSizeThreshold>0 MB</backPressureDataSizeThreshold><backPressureObjectThreshold>0</backPressureObjectThreshold><destination><groupId>b4071270-9195-4a69-92b5-b30e563380d1</groupId><id>b87b5f65-7f16-4b00-b8b2-fa0747f468de</id><type>FUNNEL</type></destination><flowFileExpiration>0 sec</flowFileExpiration><labelIndex>1</labelIndex><name></name><selectedRelationships>success</selectedRelationships><source><groupId>b4071270-9195-4a69-92b5-b30e563380d1</groupId><id>7a098aca-97ec-40dd-b185-5450d6f66968</id><type>PROCESSOR</type></source><zIndex>0</zIndex></connections><connections><id>020c0191-a212-41c4-897d-22357b5b9f6e</id><parentGroupId>b4071270-9195-4a69-92b5-b30e563380d1</parentGroupId><backPressureDataSizeThreshold>0 MB</backPressureDataSizeThreshold><backPressureObjectThreshold>0</backPressureObjectThreshold><destination><groupId>b4071270-9195-4a69-92b5-b30e563380d1</groupId><id>b87b5f65-7f16-4b00-b8b2-fa0747f468de</id><type>FUNNEL</type></destination><flowFileExpiration>0 sec</flowFileExpiration><labelIndex>1</labelIndex><name></name><selectedRelationships>success</selectedRelationships><source><groupId>b4071270-9195-4a69-92b5-b30e563380d1</groupId><id>6c49de2c-c925-4fad-ab34-81424b278120</id><type>PROCESSOR</type></source><zIndex>0</zIndex></connections><connections><id>198d935f-e044-49f4-9f7b-580c8e1e29db</id><parentGroupId>b4071270-9195-4a69-92b5-b30e563380d1</parentGroupId><backPressureDataSizeThreshold>0 MB</backPressureDataSizeThreshold><backPressureObjectThreshold>0</backPressureObjectThreshold><destination><groupId>b4071270-9195-4a69-92b5-b30e563380d1</groupId><id>b87b5f65-7f16-4b00-b8b2-fa0747f468de</id><type>FUNNEL</type></destination><flowFileExpiration>0 sec</flowFileExpiration><labelIndex>1</labelIndex><name></name><selectedRelationships>success</selectedRelationships><source><groupId>b4071270-9195-4a69-92b5-b30e563380d1</groupId><id>224f78d3-bd71-48cf-baaf-dfa9795a1145</id><type>PROCESSOR</type></source><zIndex>0</zIndex></connections><connections><id>90f9f513-0c52-4947-818f-3326d82c0375</id><parentGroupId>b4071270-9195-4a69-92b5-b30e563380d1</parentGroupId><backPressureDataSizeThreshold>0 MB</backPressureDataSizeThreshold><backPressureObjectThreshold>0</backPressureObjectThreshold><destination><groupId>b4071270-9195-4a69-92b5-b30e563380d1</groupId><id>b87b5f65-7f16-4b00-b8b2-fa0747f468de</id><type>FUNNEL</type></destination><flowFileExpiration>0 sec</flowFileExpiration><labelIndex>1</labelIndex><name></name><selectedRelationships>success</selectedRelationships><source><groupId>b4071270-9195-4a69-92b5-b30e563380d1</groupId><id>74aace72-a467-457e-9b97-be32c887e23d</id><type>PROCESSOR</type></source><zIndex>0</zIndex></connections><connections><id>2974c68c-5e34-4a9e-a2f1-2c2ad1333696</id><parentGroupId>b4071270-9195-4a69-92b5-b30e563380d1</parentGroupId><backPressureDataSizeThreshold>0 MB</backPressureDataSizeThreshold><backPressureObjectThreshold>0</backPressureObjectThreshold><destination><groupId>b4071270-9195-4a69-92b5-b30e563380d1</groupId><id>b87b5f65-7f16-4b00-b8b2-fa0747f468de</id><type>FUNNEL</type></destination><flowFileExpiration>0 sec</flowFileExpiration><labelIndex>1</labelIndex><name></name><selectedRelationships>success</selectedRelationships><source><groupId>b4071270-9195-4a69-92b5-b30e563380d1</groupId><id>8316e1ef-5c8c-4196-9bff-dce49b714a54</id><type>PROCESSOR</type></source><zIndex>0</zIndex></connections><funnels><id>b87b5f65-7f16-4b00-b8b2-fa0747f468de</id><parentGroupId>b4071270-9195-4a69-92b5-b30e563380d1</parentGroupId><position><x>295.9999995934055</x><y>259.36001483172987</y></position></funnels><labels><id>14e1ba4a-3fcb-4649-93d3-ac5942b14690</id><parentGroupId>b4071270-9195-4a69-92b5-b30e563380d1</parentGroupId><position><x>-223.8185410674917</x><y>-44.21126308912372</y></position><height>169.39125061035156</height><label>Header module</label><style><entry><key>font-size</key><value>16px</value></entry><entry><key>background-color</key><value>#ffc691</value></entry></style><width>1043.0384521484375</width></labels><labels><id>1cbe91c3-3c77-4c22-87a1-f69636bf0f5f</id><parentGroupId>b4071270-9195-4a69-92b5-b30e563380d1</parentGroupId><position><x>-322.26736690367335</x><y>387.7189241362181</y></position><height>173.78106689453125</height><label>Search module</label><style><entry><key>font-size</key><value>16px</value></entry><entry><key>background-color</key><value>#a37e05</value></entry></style><width>1307.0872802734375</width></labels><outputPorts><id>c80e5614-a310-47a3-884c-d890cd4886b8</id><parentGroupId>b4071270-9195-4a69-92b5-b30e563380d1</parentGroupId><position><x>1020.2398677574679</x><y>268.8000172731361</y></position><concurrentlySchedulableTaskCount>1</concurrentlySchedulableTaskCount><name>AccessLogs</name><state>STOPPED</state><type>OUTPUT_PORT</type></outputPorts><processors><id>9ea816c4-1183-41a0-b336-0126788d59a9</id><parentGroupId>b4071270-9195-4a69-92b5-b30e563380d1</parentGroupId><position><x>10.766018867492676</x><y>424.479413151741</y></position><config><bulletinLevel>WARN</bulletinLevel><comments></comments><concurrentlySchedulableTaskCount>1</concurrentlySchedulableTaskCount><defaultConcurrentTasks><entry><key>TIMER_DRIVEN</key><value>1</value></entry><entry><key>EVENT_DRIVEN</key><value>0</value></entry><entry><key>CRON_DRIVEN</key><value>1</value></entry></defaultConcurrentTasks><defaultSchedulingPeriod><entry><key>TIMER_DRIVEN</key><value>0 sec</value></entry><entry><key>CRON_DRIVEN</key><value>* * * * * ?</value></entry></defaultSchedulingPeriod><descriptors><entry><key>File to Tail</key><value><description>Fully-qualified filename of the file that should be tailed</description><displayName>File to Tail</displayName><dynamic>false</dynamic><name>File to Tail</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>Rolling Filename Pattern</key><value><description>If the file to tail &quot;rolls over&quot; as would be the case with log files, this filename pattern will be used to identify files that have rolled over so that if NiFi is restarted, and the file has rolled over, it will be able to pick up where it left off. This pattern supports wildcard characters * and ? and will assume that the files that have rolled over live in the same directory as the file being tailed.</description><displayName>Rolling Filename Pattern</displayName><dynamic>false</dynamic><name>Rolling Filename Pattern</name><required>false</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>State File</key><value><description>Specifies the file that should be used for storing state about what data has been ingested so that upon restart NiFi can resume from where it left off</description><displayName>State File</displayName><dynamic>false</dynamic><name>State File</name><required>false</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>Initial Start Position</key><value><allowableValues><description>Start with the oldest data that matches the Rolling Filename Pattern and then begin reading from the File to Tail</description><displayName>Beginning of Time</displayName><value>Beginning of Time</value></allowableValues><allowableValues><description>Start with the beginning of the File to Tail. Do not ingest any data that has already been rolled over</description><displayName>Beginning of File</displayName><value>Beginning of File</value></allowableValues><allowableValues><description>Start with the data at the end of the File to Tail. Do not ingest any data thas has already been rolled over or any data in the File to Tail that has already been written.</description><displayName>Current Time</displayName><value>Current Time</value></allowableValues><defaultValue>Beginning of File</defaultValue><description>When the Processor first begins to tail data, this property specifies where the Processor should begin reading data. Once data has been ingested from the file, the Processor will continue from the last point from which it has received data.</description><displayName>Initial Start Position</displayName><dynamic>false</dynamic><name>Initial Start Position</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>File Location</key><value><allowableValues><description>File is located on a local disk drive. Each node in a cluster will tail a different file.</description><displayName>Local</displayName><value>Local</value></allowableValues><allowableValues><description>File is located on a remote resource. This Processor will store state across the cluster so that it can be run on Primary Node Only and a new Primary Node can pick up where the last one left off.</description><displayName>Remote</displayName><value>Remote</value></allowableValues><defaultValue>Local</defaultValue><description>Specifies where the file is located, so that state can be stored appropriately in order to ensure that all data is consumed without duplicating data upon restart of NiFi</description><displayName>File Location</displayName><dynamic>false</dynamic><name>File Location</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry></descriptors><lossTolerant>false</lossTolerant><penaltyDuration>10 sec</penaltyDuration><properties><entry><key>File to Tail</key><value>/mnt/working-dir-wang-heman/ZeroDowntimeDeployment/log_data/accesslog-server005.log</value></entry><entry><key>Rolling Filename Pattern</key></entry><entry><key>State File</key></entry><entry><key>Initial Start Position</key></entry><entry><key>File Location</key></entry></properties><runDurationMillis>0</runDurationMillis><schedulingPeriod>0 sec</schedulingPeriod><schedulingStrategy>TIMER_DRIVEN</schedulingStrategy><yieldDuration>1 sec</yieldDuration></config><name>Server005-search-Accesslogs</name><relationships><autoTerminate>false</autoTerminate><description>All FlowFiles are routed to this Relationship.</description><name>success</name></relationships><state>STOPPED</state><style/><supportsEventDriven>false</supportsEventDriven><supportsParallelProcessing>false</supportsParallelProcessing><type>org.apache.nifi.processors.standard.TailFile</type></processors><processors><id>224f78d3-bd71-48cf-baaf-dfa9795a1145</id><parentGroupId>b4071270-9195-4a69-92b5-b30e563380d1</parentGroupId><position><x>-186.07114505767822</x><y>-8.021212220191956</y></position><config><bulletinLevel>WARN</bulletinLevel><comments></comments><concurrentlySchedulableTaskCount>1</concurrentlySchedulableTaskCount><defaultConcurrentTasks><entry><key>TIMER_DRIVEN</key><value>1</value></entry><entry><key>EVENT_DRIVEN</key><value>0</value></entry><entry><key>CRON_DRIVEN</key><value>1</value></entry></defaultConcurrentTasks><defaultSchedulingPeriod><entry><key>TIMER_DRIVEN</key><value>0 sec</value></entry><entry><key>CRON_DRIVEN</key><value>* * * * * ?</value></entry></defaultSchedulingPeriod><descriptors><entry><key>File to Tail</key><value><description>Fully-qualified filename of the file that should be tailed</description><displayName>File to Tail</displayName><dynamic>false</dynamic><name>File to Tail</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>Rolling Filename Pattern</key><value><description>If the file to tail &quot;rolls over&quot; as would be the case with log files, this filename pattern will be used to identify files that have rolled over so that if NiFi is restarted, and the file has rolled over, it will be able to pick up where it left off. This pattern supports wildcard characters * and ? and will assume that the files that have rolled over live in the same directory as the file being tailed.</description><displayName>Rolling Filename Pattern</displayName><dynamic>false</dynamic><name>Rolling Filename Pattern</name><required>false</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>State File</key><value><description>Specifies the file that should be used for storing state about what data has been ingested so that upon restart NiFi can resume from where it left off</description><displayName>State File</displayName><dynamic>false</dynamic><name>State File</name><required>false</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>Initial Start Position</key><value><allowableValues><description>Start with the oldest data that matches the Rolling Filename Pattern and then begin reading from the File to Tail</description><displayName>Beginning of Time</displayName><value>Beginning of Time</value></allowableValues><allowableValues><description>Start with the beginning of the File to Tail. Do not ingest any data that has already been rolled over</description><displayName>Beginning of File</displayName><value>Beginning of File</value></allowableValues><allowableValues><description>Start with the data at the end of the File to Tail. Do not ingest any data thas has already been rolled over or any data in the File to Tail that has already been written.</description><displayName>Current Time</displayName><value>Current Time</value></allowableValues><defaultValue>Beginning of File</defaultValue><description>When the Processor first begins to tail data, this property specifies where the Processor should begin reading data. Once data has been ingested from the file, the Processor will continue from the last point from which it has received data.</description><displayName>Initial Start Position</displayName><dynamic>false</dynamic><name>Initial Start Position</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>File Location</key><value><allowableValues><description>File is located on a local disk drive. Each node in a cluster will tail a different file.</description><displayName>Local</displayName><value>Local</value></allowableValues><allowableValues><description>File is located on a remote resource. This Processor will store state across the cluster so that it can be run on Primary Node Only and a new Primary Node can pick up where the last one left off.</description><displayName>Remote</displayName><value>Remote</value></allowableValues><defaultValue>Local</defaultValue><description>Specifies where the file is located, so that state can be stored appropriately in order to ensure that all data is consumed without duplicating data upon restart of NiFi</description><displayName>File Location</displayName><dynamic>false</dynamic><name>File Location</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry></descriptors><lossTolerant>false</lossTolerant><penaltyDuration>10 sec</penaltyDuration><properties><entry><key>File to Tail</key><value>/mnt/working-dir-wang-heman/ZeroDowntimeDeployment/log_data/accesslog-server001.log</value></entry><entry><key>Rolling Filename Pattern</key></entry><entry><key>State File</key></entry><entry><key>Initial Start Position</key></entry><entry><key>File Location</key></entry></properties><runDurationMillis>0</runDurationMillis><schedulingPeriod>0 sec</schedulingPeriod><schedulingStrategy>TIMER_DRIVEN</schedulingStrategy><yieldDuration>1 sec</yieldDuration></config><name>Server001-Header-Accesslogs</name><relationships><autoTerminate>false</autoTerminate><description>All FlowFiles are routed to this Relationship.</description><name>success</name></relationships><state>STOPPED</state><style/><supportsEventDriven>false</supportsEventDriven><supportsParallelProcessing>false</supportsParallelProcessing><type>org.apache.nifi.processors.standard.TailFile</type></processors><processors><id>7a098aca-97ec-40dd-b185-5450d6f66968</id><parentGroupId>b4071270-9195-4a69-92b5-b30e563380d1</parentGroupId><position><x>133.1042251586914</x><y>-6.440098881721497</y></position><config><bulletinLevel>WARN</bulletinLevel><comments></comments><concurrentlySchedulableTaskCount>1</concurrentlySchedulableTaskCount><defaultConcurrentTasks><entry><key>TIMER_DRIVEN</key><value>1</value></entry><entry><key>EVENT_DRIVEN</key><value>0</value></entry><entry><key>CRON_DRIVEN</key><value>1</value></entry></defaultConcurrentTasks><defaultSchedulingPeriod><entry><key>TIMER_DRIVEN</key><value>0 sec</value></entry><entry><key>CRON_DRIVEN</key><value>* * * * * ?</value></entry></defaultSchedulingPeriod><descriptors><entry><key>File to Tail</key><value><description>Fully-qualified filename of the file that should be tailed</description><displayName>File to Tail</displayName><dynamic>false</dynamic><name>File to Tail</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>Rolling Filename Pattern</key><value><description>If the file to tail &quot;rolls over&quot; as would be the case with log files, this filename pattern will be used to identify files that have rolled over so that if NiFi is restarted, and the file has rolled over, it will be able to pick up where it left off. This pattern supports wildcard characters * and ? and will assume that the files that have rolled over live in the same directory as the file being tailed.</description><displayName>Rolling Filename Pattern</displayName><dynamic>false</dynamic><name>Rolling Filename Pattern</name><required>false</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>State File</key><value><description>Specifies the file that should be used for storing state about what data has been ingested so that upon restart NiFi can resume from where it left off</description><displayName>State File</displayName><dynamic>false</dynamic><name>State File</name><required>false</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>Initial Start Position</key><value><allowableValues><description>Start with the oldest data that matches the Rolling Filename Pattern and then begin reading from the File to Tail</description><displayName>Beginning of Time</displayName><value>Beginning of Time</value></allowableValues><allowableValues><description>Start with the beginning of the File to Tail. Do not ingest any data that has already been rolled over</description><displayName>Beginning of File</displayName><value>Beginning of File</value></allowableValues><allowableValues><description>Start with the data at the end of the File to Tail. Do not ingest any data thas has already been rolled over or any data in the File to Tail that has already been written.</description><displayName>Current Time</displayName><value>Current Time</value></allowableValues><defaultValue>Beginning of File</defaultValue><description>When the Processor first begins to tail data, this property specifies where the Processor should begin reading data. Once data has been ingested from the file, the Processor will continue from the last point from which it has received data.</description><displayName>Initial Start Position</displayName><dynamic>false</dynamic><name>Initial Start Position</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>File Location</key><value><allowableValues><description>File is located on a local disk drive. Each node in a cluster will tail a different file.</description><displayName>Local</displayName><value>Local</value></allowableValues><allowableValues><description>File is located on a remote resource. This Processor will store state across the cluster so that it can be run on Primary Node Only and a new Primary Node can pick up where the last one left off.</description><displayName>Remote</displayName><value>Remote</value></allowableValues><defaultValue>Local</defaultValue><description>Specifies where the file is located, so that state can be stored appropriately in order to ensure that all data is consumed without duplicating data upon restart of NiFi</description><displayName>File Location</displayName><dynamic>false</dynamic><name>File Location</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry></descriptors><lossTolerant>false</lossTolerant><penaltyDuration>10 sec</penaltyDuration><properties><entry><key>File to Tail</key><value>/mnt/working-dir-wang-heman/ZeroDowntimeDeployment/log_data/accesslog-server002.log</value></entry><entry><key>Rolling Filename Pattern</key></entry><entry><key>State File</key></entry><entry><key>Initial Start Position</key></entry><entry><key>File Location</key></entry></properties><runDurationMillis>0</runDurationMillis><schedulingPeriod>0 sec</schedulingPeriod><schedulingStrategy>TIMER_DRIVEN</schedulingStrategy><yieldDuration>1 sec</yieldDuration></config><name>Server002-Header-Accesslogs</name><relationships><autoTerminate>false</autoTerminate><description>All FlowFiles are routed to this Relationship.</description><name>success</name></relationships><state>STOPPED</state><style/><supportsEventDriven>false</supportsEventDriven><supportsParallelProcessing>false</supportsParallelProcessing><type>org.apache.nifi.processors.standard.TailFile</type></processors><processors><id>6c49de2c-c925-4fad-ab34-81424b278120</id><parentGroupId>b4071270-9195-4a69-92b5-b30e563380d1</parentGroupId><position><x>651.8751955032349</x><y>425.20019257068634</y></position><config><bulletinLevel>WARN</bulletinLevel><comments></comments><concurrentlySchedulableTaskCount>1</concurrentlySchedulableTaskCount><defaultConcurrentTasks><entry><key>TIMER_DRIVEN</key><value>1</value></entry><entry><key>EVENT_DRIVEN</key><value>0</value></entry><entry><key>CRON_DRIVEN</key><value>1</value></entry></defaultConcurrentTasks><defaultSchedulingPeriod><entry><key>TIMER_DRIVEN</key><value>0 sec</value></entry><entry><key>CRON_DRIVEN</key><value>* * * * * ?</value></entry></defaultSchedulingPeriod><descriptors><entry><key>File to Tail</key><value><description>Fully-qualified filename of the file that should be tailed</description><displayName>File to Tail</displayName><dynamic>false</dynamic><name>File to Tail</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>Rolling Filename Pattern</key><value><description>If the file to tail &quot;rolls over&quot; as would be the case with log files, this filename pattern will be used to identify files that have rolled over so that if NiFi is restarted, and the file has rolled over, it will be able to pick up where it left off. This pattern supports wildcard characters * and ? and will assume that the files that have rolled over live in the same directory as the file being tailed.</description><displayName>Rolling Filename Pattern</displayName><dynamic>false</dynamic><name>Rolling Filename Pattern</name><required>false</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>State File</key><value><description>Specifies the file that should be used for storing state about what data has been ingested so that upon restart NiFi can resume from where it left off</description><displayName>State File</displayName><dynamic>false</dynamic><name>State File</name><required>false</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>Initial Start Position</key><value><allowableValues><description>Start with the oldest data that matches the Rolling Filename Pattern and then begin reading from the File to Tail</description><displayName>Beginning of Time</displayName><value>Beginning of Time</value></allowableValues><allowableValues><description>Start with the beginning of the File to Tail. Do not ingest any data that has already been rolled over</description><displayName>Beginning of File</displayName><value>Beginning of File</value></allowableValues><allowableValues><description>Start with the data at the end of the File to Tail. Do not ingest any data thas has already been rolled over or any data in the File to Tail that has already been written.</description><displayName>Current Time</displayName><value>Current Time</value></allowableValues><defaultValue>Beginning of File</defaultValue><description>When the Processor first begins to tail data, this property specifies where the Processor should begin reading data. Once data has been ingested from the file, the Processor will continue from the last point from which it has received data.</description><displayName>Initial Start Position</displayName><dynamic>false</dynamic><name>Initial Start Position</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>File Location</key><value><allowableValues><description>File is located on a local disk drive. Each node in a cluster will tail a different file.</description><displayName>Local</displayName><value>Local</value></allowableValues><allowableValues><description>File is located on a remote resource. This Processor will store state across the cluster so that it can be run on Primary Node Only and a new Primary Node can pick up where the last one left off.</description><displayName>Remote</displayName><value>Remote</value></allowableValues><defaultValue>Local</defaultValue><description>Specifies where the file is located, so that state can be stored appropriately in order to ensure that all data is consumed without duplicating data upon restart of NiFi</description><displayName>File Location</displayName><dynamic>false</dynamic><name>File Location</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry></descriptors><lossTolerant>false</lossTolerant><penaltyDuration>10 sec</penaltyDuration><properties><entry><key>File to Tail</key><value>/mnt/working-dir-wang-heman/ZeroDowntimeDeployment/log_data/accesslog-server007.log</value></entry><entry><key>Rolling Filename Pattern</key></entry><entry><key>State File</key></entry><entry><key>Initial Start Position</key></entry><entry><key>File Location</key></entry></properties><runDurationMillis>0</runDurationMillis><schedulingPeriod>0 sec</schedulingPeriod><schedulingStrategy>TIMER_DRIVEN</schedulingStrategy><yieldDuration>1 sec</yieldDuration></config><name>Server007-search-Accesslogs</name><relationships><autoTerminate>false</autoTerminate><description>All FlowFiles are routed to this Relationship.</description><name>success</name></relationships><state>STOPPED</state><style/><supportsEventDriven>false</supportsEventDriven><supportsParallelProcessing>false</supportsParallelProcessing><type>org.apache.nifi.processors.standard.TailFile</type></processors><processors><id>8316e1ef-5c8c-4196-9bff-dce49b714a54</id><parentGroupId>b4071270-9195-4a69-92b5-b30e563380d1</parentGroupId><position><x>454.19115447998047</x><y>-6.5987290143966675</y></position><config><bulletinLevel>WARN</bulletinLevel><comments></comments><concurrentlySchedulableTaskCount>1</concurrentlySchedulableTaskCount><defaultConcurrentTasks><entry><key>TIMER_DRIVEN</key><value>1</value></entry><entry><key>EVENT_DRIVEN</key><value>0</value></entry><entry><key>CRON_DRIVEN</key><value>1</value></entry></defaultConcurrentTasks><defaultSchedulingPeriod><entry><key>TIMER_DRIVEN</key><value>0 sec</value></entry><entry><key>CRON_DRIVEN</key><value>* * * * * ?</value></entry></defaultSchedulingPeriod><descriptors><entry><key>File to Tail</key><value><description>Fully-qualified filename of the file that should be tailed</description><displayName>File to Tail</displayName><dynamic>false</dynamic><name>File to Tail</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>Rolling Filename Pattern</key><value><description>If the file to tail &quot;rolls over&quot; as would be the case with log files, this filename pattern will be used to identify files that have rolled over so that if NiFi is restarted, and the file has rolled over, it will be able to pick up where it left off. This pattern supports wildcard characters * and ? and will assume that the files that have rolled over live in the same directory as the file being tailed.</description><displayName>Rolling Filename Pattern</displayName><dynamic>false</dynamic><name>Rolling Filename Pattern</name><required>false</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>State File</key><value><description>Specifies the file that should be used for storing state about what data has been ingested so that upon restart NiFi can resume from where it left off</description><displayName>State File</displayName><dynamic>false</dynamic><name>State File</name><required>false</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>Initial Start Position</key><value><allowableValues><description>Start with the oldest data that matches the Rolling Filename Pattern and then begin reading from the File to Tail</description><displayName>Beginning of Time</displayName><value>Beginning of Time</value></allowableValues><allowableValues><description>Start with the beginning of the File to Tail. Do not ingest any data that has already been rolled over</description><displayName>Beginning of File</displayName><value>Beginning of File</value></allowableValues><allowableValues><description>Start with the data at the end of the File to Tail. Do not ingest any data thas has already been rolled over or any data in the File to Tail that has already been written.</description><displayName>Current Time</displayName><value>Current Time</value></allowableValues><defaultValue>Beginning of File</defaultValue><description>When the Processor first begins to tail data, this property specifies where the Processor should begin reading data. Once data has been ingested from the file, the Processor will continue from the last point from which it has received data.</description><displayName>Initial Start Position</displayName><dynamic>false</dynamic><name>Initial Start Position</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>File Location</key><value><allowableValues><description>File is located on a local disk drive. Each node in a cluster will tail a different file.</description><displayName>Local</displayName><value>Local</value></allowableValues><allowableValues><description>File is located on a remote resource. This Processor will store state across the cluster so that it can be run on Primary Node Only and a new Primary Node can pick up where the last one left off.</description><displayName>Remote</displayName><value>Remote</value></allowableValues><defaultValue>Local</defaultValue><description>Specifies where the file is located, so that state can be stored appropriately in order to ensure that all data is consumed without duplicating data upon restart of NiFi</description><displayName>File Location</displayName><dynamic>false</dynamic><name>File Location</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry></descriptors><lossTolerant>false</lossTolerant><penaltyDuration>10 sec</penaltyDuration><properties><entry><key>File to Tail</key><value>/mnt/working-dir-wang-heman/ZeroDowntimeDeployment/log_data/accesslog-server003.log</value></entry><entry><key>Rolling Filename Pattern</key></entry><entry><key>State File</key></entry><entry><key>Initial Start Position</key></entry><entry><key>File Location</key></entry></properties><runDurationMillis>0</runDurationMillis><schedulingPeriod>0 sec</schedulingPeriod><schedulingStrategy>TIMER_DRIVEN</schedulingStrategy><yieldDuration>1 sec</yieldDuration></config><name>Server003-Header-Accesslogs</name><relationships><autoTerminate>false</autoTerminate><description>All FlowFiles are routed to this Relationship.</description><name>success</name></relationships><state>STOPPED</state><style/><supportsEventDriven>false</supportsEventDriven><supportsParallelProcessing>false</supportsParallelProcessing><type>org.apache.nifi.processors.standard.TailFile</type></processors><processors><id>005edcac-46ee-49cb-9de0-f0376a3e2b4f</id><parentGroupId>b4071270-9195-4a69-92b5-b30e563380d1</parentGroupId><position><x>-311.3185758590698</x><y>423.169842839241</y></position><config><bulletinLevel>WARN</bulletinLevel><comments></comments><concurrentlySchedulableTaskCount>1</concurrentlySchedulableTaskCount><defaultConcurrentTasks><entry><key>TIMER_DRIVEN</key><value>1</value></entry><entry><key>EVENT_DRIVEN</key><value>0</value></entry><entry><key>CRON_DRIVEN</key><value>1</value></entry></defaultConcurrentTasks><defaultSchedulingPeriod><entry><key>TIMER_DRIVEN</key><value>0 sec</value></entry><entry><key>CRON_DRIVEN</key><value>* * * * * ?</value></entry></defaultSchedulingPeriod><descriptors><entry><key>File to Tail</key><value><description>Fully-qualified filename of the file that should be tailed</description><displayName>File to Tail</displayName><dynamic>false</dynamic><name>File to Tail</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>Rolling Filename Pattern</key><value><description>If the file to tail &quot;rolls over&quot; as would be the case with log files, this filename pattern will be used to identify files that have rolled over so that if NiFi is restarted, and the file has rolled over, it will be able to pick up where it left off. This pattern supports wildcard characters * and ? and will assume that the files that have rolled over live in the same directory as the file being tailed.</description><displayName>Rolling Filename Pattern</displayName><dynamic>false</dynamic><name>Rolling Filename Pattern</name><required>false</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>State File</key><value><description>Specifies the file that should be used for storing state about what data has been ingested so that upon restart NiFi can resume from where it left off</description><displayName>State File</displayName><dynamic>false</dynamic><name>State File</name><required>false</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>Initial Start Position</key><value><allowableValues><description>Start with the oldest data that matches the Rolling Filename Pattern and then begin reading from the File to Tail</description><displayName>Beginning of Time</displayName><value>Beginning of Time</value></allowableValues><allowableValues><description>Start with the beginning of the File to Tail. Do not ingest any data that has already been rolled over</description><displayName>Beginning of File</displayName><value>Beginning of File</value></allowableValues><allowableValues><description>Start with the data at the end of the File to Tail. Do not ingest any data thas has already been rolled over or any data in the File to Tail that has already been written.</description><displayName>Current Time</displayName><value>Current Time</value></allowableValues><defaultValue>Beginning of File</defaultValue><description>When the Processor first begins to tail data, this property specifies where the Processor should begin reading data. Once data has been ingested from the file, the Processor will continue from the last point from which it has received data.</description><displayName>Initial Start Position</displayName><dynamic>false</dynamic><name>Initial Start Position</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>File Location</key><value><allowableValues><description>File is located on a local disk drive. Each node in a cluster will tail a different file.</description><displayName>Local</displayName><value>Local</value></allowableValues><allowableValues><description>File is located on a remote resource. This Processor will store state across the cluster so that it can be run on Primary Node Only and a new Primary Node can pick up where the last one left off.</description><displayName>Remote</displayName><value>Remote</value></allowableValues><defaultValue>Local</defaultValue><description>Specifies where the file is located, so that state can be stored appropriately in order to ensure that all data is consumed without duplicating data upon restart of NiFi</description><displayName>File Location</displayName><dynamic>false</dynamic><name>File Location</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry></descriptors><lossTolerant>false</lossTolerant><penaltyDuration>10 sec</penaltyDuration><properties><entry><key>File to Tail</key><value>/mnt/working-dir-wang-heman/ZeroDowntimeDeployment/log_data/accesslog-server004.log</value></entry><entry><key>Rolling Filename Pattern</key></entry><entry><key>State File</key></entry><entry><key>Initial Start Position</key></entry><entry><key>File Location</key></entry></properties><runDurationMillis>0</runDurationMillis><schedulingPeriod>0 sec</schedulingPeriod><schedulingStrategy>TIMER_DRIVEN</schedulingStrategy><yieldDuration>1 sec</yieldDuration></config><name>Server004-search-Accesslogs</name><relationships><autoTerminate>false</autoTerminate><description>All FlowFiles are routed to this Relationship.</description><name>success</name></relationships><state>STOPPED</state><style/><supportsEventDriven>false</supportsEventDriven><supportsParallelProcessing>false</supportsParallelProcessing><type>org.apache.nifi.processors.standard.TailFile</type></processors><processors><id>74aace72-a467-457e-9b97-be32c887e23d</id><parentGroupId>b4071270-9195-4a69-92b5-b30e563380d1</parentGroupId><position><x>332.91868305206293</x><y>425.36477386951447</y></position><config><bulletinLevel>WARN</bulletinLevel><comments></comments><concurrentlySchedulableTaskCount>1</concurrentlySchedulableTaskCount><defaultConcurrentTasks><entry><key>TIMER_DRIVEN</key><value>1</value></entry><entry><key>EVENT_DRIVEN</key><value>0</value></entry><entry><key>CRON_DRIVEN</key><value>1</value></entry></defaultConcurrentTasks><defaultSchedulingPeriod><entry><key>TIMER_DRIVEN</key><value>0 sec</value></entry><entry><key>CRON_DRIVEN</key><value>* * * * * ?</value></entry></defaultSchedulingPeriod><descriptors><entry><key>File to Tail</key><value><description>Fully-qualified filename of the file that should be tailed</description><displayName>File to Tail</displayName><dynamic>false</dynamic><name>File to Tail</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>Rolling Filename Pattern</key><value><description>If the file to tail &quot;rolls over&quot; as would be the case with log files, this filename pattern will be used to identify files that have rolled over so that if NiFi is restarted, and the file has rolled over, it will be able to pick up where it left off. This pattern supports wildcard characters * and ? and will assume that the files that have rolled over live in the same directory as the file being tailed.</description><displayName>Rolling Filename Pattern</displayName><dynamic>false</dynamic><name>Rolling Filename Pattern</name><required>false</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>State File</key><value><description>Specifies the file that should be used for storing state about what data has been ingested so that upon restart NiFi can resume from where it left off</description><displayName>State File</displayName><dynamic>false</dynamic><name>State File</name><required>false</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>Initial Start Position</key><value><allowableValues><description>Start with the oldest data that matches the Rolling Filename Pattern and then begin reading from the File to Tail</description><displayName>Beginning of Time</displayName><value>Beginning of Time</value></allowableValues><allowableValues><description>Start with the beginning of the File to Tail. Do not ingest any data that has already been rolled over</description><displayName>Beginning of File</displayName><value>Beginning of File</value></allowableValues><allowableValues><description>Start with the data at the end of the File to Tail. Do not ingest any data thas has already been rolled over or any data in the File to Tail that has already been written.</description><displayName>Current Time</displayName><value>Current Time</value></allowableValues><defaultValue>Beginning of File</defaultValue><description>When the Processor first begins to tail data, this property specifies where the Processor should begin reading data. Once data has been ingested from the file, the Processor will continue from the last point from which it has received data.</description><displayName>Initial Start Position</displayName><dynamic>false</dynamic><name>Initial Start Position</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry><entry><key>File Location</key><value><allowableValues><description>File is located on a local disk drive. Each node in a cluster will tail a different file.</description><displayName>Local</displayName><value>Local</value></allowableValues><allowableValues><description>File is located on a remote resource. This Processor will store state across the cluster so that it can be run on Primary Node Only and a new Primary Node can pick up where the last one left off.</description><displayName>Remote</displayName><value>Remote</value></allowableValues><defaultValue>Local</defaultValue><description>Specifies where the file is located, so that state can be stored appropriately in order to ensure that all data is consumed without duplicating data upon restart of NiFi</description><displayName>File Location</displayName><dynamic>false</dynamic><name>File Location</name><required>true</required><sensitive>false</sensitive><supportsEl>false</supportsEl></value></entry></descriptors><lossTolerant>false</lossTolerant><penaltyDuration>10 sec</penaltyDuration><properties><entry><key>File to Tail</key><value>/mnt/working-dir-wang-heman/ZeroDowntimeDeployment/log_data/accesslog-server006.log</value></entry><entry><key>Rolling Filename Pattern</key></entry><entry><key>State File</key></entry><entry><key>Initial Start Position</key></entry><entry><key>File Location</key></entry></properties><runDurationMillis>0</runDurationMillis><schedulingPeriod>0 sec</schedulingPeriod><schedulingStrategy>TIMER_DRIVEN</schedulingStrategy><yieldDuration>1 sec</yieldDuration></config><name>Server006-search-Accesslogs</name><relationships><autoTerminate>false</autoTerminate><description>All FlowFiles are routed to this Relationship.</description><name>success</name></relationships><state>STOPPED</state><style/><supportsEventDriven>false</supportsEventDriven><supportsParallelProcessing>false</supportsParallelProcessing><type>org.apache.nifi.processors.standard.TailFile</type></processors></snippet><timestamp>06/23/2016 20:50:40 EDT</timestamp></template>